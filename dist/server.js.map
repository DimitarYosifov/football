{"version":3,"sources":["server.js"],"names":["express","require","Bundler","options","app","file","bundler","bodyParser","path","cors","router","Router","bcrypt","firebase","port","process","env","PORT","use","static","__dirname","json","urlencoded","extended","config_firebase","apiKey","authDomain","databaseURL","storageBucket","listen","initializeApp","post","req","res","user","body","pass","database","ref","orderByChild","equalTo","once","then","snapshot","db_pass","set","Object","values","val","password","e","status","authorized","compare","err","result","storageItem","name","nameInUse","tryRegistration","salt","genSalt","hashedPassword","hash","error","send","data","undefined","players","success","params","test","clubData","signOutUser","callback","auth","onAuthStateChanged","firebaseUser","console","log","uid","email"],"mappings":"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","file":"server.js","sourceRoot":"..","sourcesContent":["const express = require('express');\r\n\r\n\r\nconst Bundler = require('parcel-bundler');\r\nconst options = {\r\n    // watch: false,\r\n    // cache: false,\r\n    // // publicUrl: '/',\r\n    // logLevel: 4,\r\n    // hmr: false,\r\n    // detailedReport: true,\r\n    // production: process.env.NODE_ENV === 'production'\r\n\r\n}; // See options section of api docs, for the possibilities\r\n\r\nconst app = express();\r\n\r\nconst file = 'index.html'; // Pass an absolute path to the entrypoint here\r\nconst bundler = new Bundler(file, options);\r\n\r\n\r\n\r\nconst bodyParser = require('body-parser');\r\nconst path = require('path');\r\nconst cors = require('cors');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nconst firebase = require(\"firebase/app\");\r\nrequire('firebase/auth');\r\nrequire('firebase/database');\r\nlet port = process.env.PORT || 3000;\r\n// app.set('views', path.join(__dirname, ''));\r\n// app.set('view engine', 'ejs');\r\n// app.engine('html', require('ejs').renderFile);\r\n// app.disable('x-powered-by');\r\napp.use(express.static(__dirname + '/dist/'));\r\napp.use(bodyParser.json());\r\n// app.use(\"/\", router);\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(cors());\r\n\r\n// Let express use the bundler middleware, this will let Parcel handle every request over your express server\r\n\r\n// app.use(bundler.middleware());\r\n\r\n\r\n\r\napp.options('*', cors());\r\n// router.get('*', function(req, res, next) {\r\n//     res.render('index.html', {});\r\n// });\r\nconst config_firebase = {\r\n    apiKey: 'AIzaSyB6CoLU9BDQyk998IlqyIY7cVwSR-fvsSw',\r\n    authDomain: 'football-d4256.firebaseapp.com',\r\n    databaseURL: 'football-d4256.firebaseio.com',\r\n    storageBucket: 'football-d4256.appspot.com'\r\n};\r\napp.listen(port, function () { });\r\n\r\nfirebase.initializeApp(config_firebase);\r\n\r\napp.post('/login', async (req, res) => {\r\n\r\n    let user = req.body.user;\r\n    let pass = req.body.pass;\r\n\r\n    firebase.database().ref(\"/users/\").orderByChild(\"name\").equalTo(user).once('value').then(function (snapshot) {\r\n\r\n        let db_pass;\r\n        res.set('Content-Type', 'application/json');\r\n        //        res.set( \"Access-Control-Allow-Origin\", \"*\",);\r\n        try {\r\n            db_pass = Object.values(snapshot.val())[0].password;\r\n        } catch (e) { // no such user\r\n            db_pass = null;\r\n            res.status(200);\r\n            res.json({\r\n                authorized: false\r\n            });\r\n            //            res.send(`Not Allowed`);\r\n            return;\r\n        }\r\n\r\n        bcrypt.compare(pass, db_pass, function (err, result) {\r\n            if (err) {\r\n                res.status(500);\r\n                res.json({\r\n                    authorized: false\r\n                });\r\n            } else if (!result) {\r\n                res.status(200);\r\n                res.json({\r\n                    authorized: false\r\n                });\r\n            } else {\r\n                res.status(200);\r\n                res.json({\r\n                    storageItem: db_pass,\r\n                    authorized: true\r\n                });\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\napp.post('/register', async (req, res) => {\r\n    let user = req.body.user;\r\n    let pass = req.body.pass;\r\n    //    is name already taken\r\n    firebase.database().ref(\"/users/\").orderByChild(\"name\").equalTo(user).once('value').then(function (snapshot) {\r\n        let name;\r\n        try {\r\n            name = Object.values(snapshot.val())[0].name;\r\n            res.status(200);\r\n            res.json({\r\n                authorized: false,\r\n                nameInUse: true\r\n            });\r\n            return;\r\n        } catch (e) {\r\n            name = null;\r\n            tryRegistration();\r\n        }\r\n    });\r\n    let tryRegistration = async () => {\r\n        try {\r\n            const salt = await bcrypt.genSalt();\r\n            const hashedPassword = await bcrypt.hash(pass, salt);\r\n            res.set('Content-Type', 'application/json');\r\n            firebase.database().ref('/users/' + user).set({\r\n                name: user,\r\n                password: hashedPassword\r\n            }, function (error) {\r\n                if (error) {\r\n                    res.status(200);\r\n                    res.json({\r\n                        authorized: false\r\n                    });\r\n                } else {\r\n                    res.status(200);\r\n                    res.json({\r\n                        storageItem: hashedPassword,\r\n                        authorized: true\r\n                    });\r\n                }\r\n            });\r\n        } catch (e) {\r\n            res.status(500).send(\"error_\");\r\n        }\r\n    };\r\n});\r\n\r\napp.post('/storageData', async (req, res) => {\r\n    let data = req.body.data;\r\n    firebase.database().ref(\"/users/\").orderByChild(\"password\").equalTo(data).once('value').then(function (snapshot) {\r\n        res.set('Content-Type', 'application/json');\r\n        res.status(200);\r\n        res.json({\r\n            authorized: Object.values(snapshot.val())[0].password !== undefined ? true : false\r\n        });\r\n    });\r\n});\r\n\r\napp.post('/addClub', async (req, res) => {\r\n    let name = req.body.name;\r\n    let players = req.body.players;\r\n\r\n    firebase.database().ref('/clubs/' + name).set({\r\n        name: name,\r\n        players: players\r\n    }, function (error) {\r\n        if (error) {\r\n            res.set('Content-Type', 'application/json');\r\n            res.status(500);\r\n            res.json({\r\n                success: false\r\n            });\r\n        } else {\r\n            res.set('Content-Type', 'application/json');\r\n            res.status(200);\r\n            res.json({\r\n                success: true,\r\n                //                players:\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// app.post('/getClubsPlayers', (req, res) => {\r\n//     let name = req.body.name;\r\n//     firebase.database().ref(\"/clubs/\").orderByChild(\"name\").equalTo(name).once('value').then(function (snapshot) {\r\n//         res.status(200);\r\n//         res.json({\r\n//             clubData: Object.values(snapshot.val())[0]\r\n//         });\r\n//     });\r\n// });\r\napp.use('/:test', (req, res) => {\r\n    if (req.params.test === 'getClubsPlayers') {\r\n        let name = req.body.name;\r\n        firebase.database().ref(\"/clubs/\").orderByChild(\"name\").equalTo(name).once('value').then(function (snapshot) {\r\n            res.status(200);\r\n            res.json({\r\n                clubData: Object.values(snapshot.val())[0]\r\n            });\r\n        });\r\n    }\r\n\r\n});\r\n\r\nsignOutUser = function () {\r\n    //    firebase.auth().signOut().then(function () {\r\n    //        $scope.user = '';\r\n    //        $scope.username = '';\r\n    //        $scope.img = '';\r\n    //        $state.go('home');\r\n    //    }, function (error) {\r\n    //        console.error('Sign Out Error', error);\r\n    //    });\r\n};\r\n//authStateChange\r\nuser = function (callback) {\r\n    firebase.auth().onAuthStateChanged(function (firebaseUser) {\r\n        if (firebaseUser) {\r\n            console.log(firebaseUser);\r\n            let user = firebaseUser.uid;\r\n            callback(user, firebaseUser.email)\r\n        } else {\r\n            callback(null, null)\r\n        }\r\n    });\r\n};"]}